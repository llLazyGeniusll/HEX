-- NexusUI - Beautiful UI Library for Roblox Exploiting
-- Version 1.0 - Lightweight & Modern Design

local NexusUI = {}
NexusUI.__index = NexusUI

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Utilities
local function createTween(obj, info, props)
    return TweenService:Create(obj, TweenInfo.new(info.Time or 0.3, info.Style or Enum.EasingStyle.Quad, info.Direction or Enum.EasingDirection.Out), props)
end

local function rippleEffect(button, x, y)
    local ripple = Instance.new("Frame")
    ripple.Name = "Ripple"
    ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ripple.BackgroundTransparency = 0.8
    ripple.BorderSizePixel = 0
    ripple.Size = UDim2.new(0, 0, 0, 0)
    ripple.Position = UDim2.new(0, x, 0, y)
    ripple.ZIndex = button.ZIndex + 1
    ripple.Parent = button
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(1, 0)
    corner.Parent = ripple
    
    local maxSize = math.max(button.AbsoluteSize.X, button.AbsoluteSize.Y) * 2
    
    local expandTween = createTween(ripple, {Time = 0.5}, {
        Size = UDim2.new(0, maxSize, 0, maxSize),
        Position = UDim2.new(0, x - maxSize/2, 0, y - maxSize/2),
        BackgroundTransparency = 1
    })
    
    expandTween:Play()
    expandTween.Completed:Connect(function()
        ripple:Destroy()
    end)
end

-- Theme System
local Themes = {
    Dark = {
        Background = Color3.fromRGB(25, 25, 30),
        Surface = Color3.fromRGB(35, 35, 40),
        Primary = Color3.fromRGB(100, 150, 255),
        Secondary = Color3.fromRGB(150, 100, 255),
        Success = Color3.fromRGB(75, 200, 130),
        Warning = Color3.fromRGB(255, 195, 0),
        Error = Color3.fromRGB(255, 85, 85),
        Text = Color3.fromRGB(255, 255, 255),
        TextSecondary = Color3.fromRGB(180, 180, 185),
        Border = Color3.fromRGB(60, 60, 65)
    },
    Light = {
        Background = Color3.fromRGB(245, 245, 250),
        Surface = Color3.fromRGB(255, 255, 255),
        Primary = Color3.fromRGB(70, 120, 255),
        Secondary = Color3.fromRGB(120, 70, 255),
        Success = Color3.fromRGB(45, 170, 100),
        Warning = Color3.fromRGB(255, 165, 0),
        Error = Color3.fromRGB(255, 55, 55),
        Text = Color3.fromRGB(25, 25, 30),
        TextSecondary = Color3.fromRGB(100, 100, 105),
        Border = Color3.fromRGB(220, 220, 225)
    }
}

-- Main Library
function NexusUI.new(title, theme)
    local self = setmetatable({}, NexusUI)
    self.Theme = Themes[theme] or Themes.Dark
    self.Title = title or "NexusUI"
    self.Visible = false
    self.Components = {}
    
    -- Create ScreenGui
    self.ScreenGui = Instance.new("ScreenGui")
    self.ScreenGui.Name = "NexusUI_" .. math.random(1000, 9999)
    self.ScreenGui.ResetOnSpawn = false
    
    -- Protection
    pcall(function()
        self.ScreenGui.Parent = gethui() or game.CoreGui
    end)
    
    -- Main Container
    self.Container = Instance.new("Frame")
    self.Container.Name = "MainContainer"
    self.Container.Size = UDim2.new(0, 500, 0, 400)
    self.Container.Position = UDim2.new(0.5, -250, 0.5, -200)
    self.Container.BackgroundColor3 = self.Theme.Background
    self.Container.BorderSizePixel = 0
    self.Container.Visible = false
    self.Container.Parent = self.ScreenGui
    
    -- Corner Radius
    local mainCorner = Instance.new("UICorner")
    mainCorner.CornerRadius = UDim.new(0, 12)
    mainCorner.Parent = self.Container
    
    -- Shadow Effect
    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.Size = UDim2.new(1, 40, 1, 40)
    shadow.Position = UDim2.new(0, -20, 0, -20)
    shadow.BackgroundTransparency = 1
    shadow.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
    shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    shadow.ImageTransparency = 0.8
    shadow.ZIndex = self.Container.ZIndex - 1
    shadow.Parent = self.Container
    
    -- Title Bar
    self.TitleBar = Instance.new("Frame")
    self.TitleBar.Name = "TitleBar"
    self.TitleBar.Size = UDim2.new(1, 0, 0, 50)
    self.TitleBar.Position = UDim2.new(0, 0, 0, 0)
    self.TitleBar.BackgroundColor3 = self.Theme.Surface
    self.TitleBar.BorderSizePixel = 0
    self.TitleBar.Parent = self.Container
    
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 12)
    titleCorner.Parent = self.TitleBar
    
    -- Title Text
    self.TitleLabel = Instance.new("TextLabel")
    self.TitleLabel.Name = "TitleLabel"
    self.TitleLabel.Size = UDim2.new(1, -60, 1, 0)
    self.TitleLabel.Position = UDim2.new(0, 15, 0, 0)
    self.TitleLabel.BackgroundTransparency = 1
    self.TitleLabel.Text = self.Title
    self.TitleLabel.TextColor3 = self.Theme.Text
    self.TitleLabel.TextSize = 16
    self.TitleLabel.Font = Enum.Font.GothamBold
    self.TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    self.TitleLabel.Parent = self.TitleBar
    
    -- Close Button
    self.CloseButton = Instance.new("TextButton")
    self.CloseButton.Name = "CloseButton"
    self.CloseButton.Size = UDim2.new(0, 30, 0, 30)
    self.CloseButton.Position = UDim2.new(1, -40, 0, 10)
    self.CloseButton.BackgroundColor3 = self.Theme.Error
    self.CloseButton.BorderSizePixel = 0
    self.CloseButton.Text = "Ã—"
    self.CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    self.CloseButton.TextSize = 18
    self.CloseButton.Font = Enum.Font.GothamBold
    self.CloseButton.Parent = self.TitleBar
    
    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(0, 6)
    closeCorner.Parent = self.CloseButton
    
    -- Content Container
    self.ContentContainer = Instance.new("ScrollingFrame")
    self.ContentContainer.Name = "ContentContainer"
    self.ContentContainer.Size = UDim2.new(1, -20, 1, -70)
    self.ContentContainer.Position = UDim2.new(0, 10, 0, 60)
    self.ContentContainer.BackgroundTransparency = 1
    self.ContentContainer.BorderSizePixel = 0
    self.ContentContainer.ScrollBarThickness = 6
    self.ContentContainer.ScrollBarImageColor3 = self.Theme.Primary
    self.ContentContainer.Parent = self.Container
    
    -- Layout
    self.Layout = Instance.new("UIListLayout")
    self.Layout.SortOrder = Enum.SortOrder.LayoutOrder
    self.Layout.Padding = UDim.new(0, 8)
    self.Layout.Parent = self.ContentContainer
    
    -- Dragging System
    self:_setupDragging()
    
    -- Close Button Logic
    self.CloseButton.MouseButton1Click:Connect(function()
        self:Hide()
    end)
    
    self.CloseButton.MouseEnter:Connect(function()
        createTween(self.CloseButton, {Time = 0.2}, {BackgroundColor3 = Color3.fromRGB(255, 100, 100)}):Play()
    end)
    
    self.CloseButton.MouseLeave:Connect(function()
        createTween(self.CloseButton, {Time = 0.2}, {BackgroundColor3 = self.Theme.Error}):Play()
    end)
    
    return self
end

function NexusUI:_setupDragging()
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    self.TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = self.Container.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            self.Container.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
end

function NexusUI:Show()
    self.Visible = true
    self.Container.Visible = true
    
    -- Fade in animation
    self.Container.BackgroundTransparency = 1
    self.Container.Size = UDim2.new(0, 450, 0, 350)
    
    createTween(self.Container, {Time = 0.4}, {
        BackgroundTransparency = 0,
        Size = UDim2.new(0, 500, 0, 400)
    }):Play()
end

function NexusUI:Hide()
    createTween(self.Container, {Time = 0.3}, {
        BackgroundTransparency = 1,
        Size = UDim2.new(0, 450, 0, 350)
    }):Play()
    
    wait(0.3)
    self.Container.Visible = false
    self.Visible = false
end

function NexusUI:Toggle()
    if self.Visible then
        self:Hide()
    else
        self:Show()
    end
end

-- Button Component
function NexusUI:Button(text, callback, color)
    local button = Instance.new("TextButton")
    button.Name = "Button"
    button.Size = UDim2.new(1, 0, 0, 40)
    button.BackgroundColor3 = color or self.Theme.Primary
    button.BorderSizePixel = 0
    button.Text = text or "Button"
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.TextSize = 14
    button.Font = Enum.Font.Gotham
    button.ClipsDescendants = true
    button.Parent = self.ContentContainer
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = button
    
    -- Hover Effects
    button.MouseEnter:Connect(function()
        createTween(button, {Time = 0.2}, {BackgroundTransparency = 0.1}):Play()
    end)
    
    button.MouseLeave:Connect(function()
        createTween(button, {Time = 0.2}, {BackgroundTransparency = 0}):Play()
    end)
    
    -- Click Effect
    button.MouseButton1Click:Connect(function()
        local mousePos = UserInputService:GetMouseLocation()
        local buttonPos = button.AbsolutePosition
        local x = mousePos.X - buttonPos.X
        local y = mousePos.Y - buttonPos.Y
        
        rippleEffect(button, x, y)
        
        if callback then
            callback()
        end
    end)
    
    self:_updateContentSize()
    return button
end

-- Toggle Component
function NexusUI:Toggle(text, default, callback)
    local container = Instance.new("Frame")
    container.Name = "Toggle"
    container.Size = UDim2.new(1, 0, 0, 40)
    container.BackgroundColor3 = self.Theme.Surface
    container.BorderSizePixel = 0
    container.Parent = self.ContentContainer
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = container
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -60, 1, 0)
    label.Position = UDim2.new(0, 15, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = text or "Toggle"
    label.TextColor3 = self.Theme.Text
    label.TextSize = 14
    label.Font = Enum.Font.Gotham
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = container
    
    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(0, 40, 0, 20)
    toggleButton.Position = UDim2.new(1, -50, 0.5, -10)
    toggleButton.BackgroundColor3 = default and self.Theme.Primary or self.Theme.Border
    toggleButton.BorderSizePixel = 0
    toggleButton.Text = ""
    toggleButton.Parent = container
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(1, 0)
    toggleCorner.Parent = toggleButton
    
    local toggleKnob = Instance.new("Frame")
    toggleKnob.Size = UDim2.new(0, 16, 0, 16)
    toggleKnob.Position = default and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
    toggleKnob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    toggleKnob.BorderSizePixel = 0
    toggleKnob.Parent = toggleButton
    
    local knobCorner = Instance.new("UICorner")
    knobCorner.CornerRadius = UDim.new(1, 0)
    knobCorner.Parent = toggleKnob
    
    local state = default or false
    
    toggleButton.MouseButton1Click:Connect(function()
        state = not state
        
        local knobPos = state and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8)
        local bgColor = state and self.Theme.Primary or self.Theme.Border
        
        createTween(toggleKnob, {Time = 0.2}, {Position = knobPos}):Play()
        createTween(toggleButton, {Time = 0.2}, {BackgroundColor3 = bgColor}):Play()
        
        if callback then
            callback(state)
        end
    end)
    
    self:_updateContentSize()
    return container, function() return state end
end

-- Slider Component
function NexusUI:Slider(text, min, max, default, callback)
    local container = Instance.new("Frame")
    container.Name = "Slider"
    container.Size = UDim2.new(1, 0, 0, 50)
    container.BackgroundColor3 = self.Theme.Surface
    container.BorderSizePixel = 0
    container.Parent = self.ContentContainer
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = container
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0.7, 0, 0, 20)
    label.Position = UDim2.new(0, 15, 0, 5)
    label.BackgroundTransparency = 1
    label.Text = text or "Slider"
    label.TextColor3 = self.Theme.Text
    label.TextSize = 14
    label.Font = Enum.Font.Gotham
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = container
    
    local valueLabel = Instance.new("TextLabel")
    valueLabel.Size = UDim2.new(0.3, -15, 0, 20)
    valueLabel.Position = UDim2.new(0.7, 0, 0, 5)
    valueLabel.BackgroundTransparency = 1
    valueLabel.Text = tostring(default or min)
    valueLabel.TextColor3 = self.Theme.Primary
    valueLabel.TextSize = 14
    valueLabel.Font = Enum.Font.GothamBold
    valueLabel.TextXAlignment = Enum.TextXAlignment.Right
    valueLabel.Parent = container
    
    local sliderBar = Instance.new("Frame")
    sliderBar.Size = UDim2.new(1, -30, 0, 4)
    sliderBar.Position = UDim2.new(0, 15, 1, -20)
    sliderBar.BackgroundColor3 = self.Theme.Border
    sliderBar.BorderSizePixel = 0
    sliderBar.Parent = container
    
    local barCorner = Instance.new("UICorner")
    barCorner.CornerRadius = UDim.new(1, 0)
    barCorner.Parent = sliderBar
    
    local sliderFill = Instance.new("Frame")
    sliderFill.Size = UDim2.new((default or min) / (max - min), 0, 1, 0)
    sliderFill.Position = UDim2.new(0, 0, 0, 0)
    sliderFill.BackgroundColor3 = self.Theme.Primary
    sliderFill.BorderSizePixel = 0
    sliderFill.Parent = sliderBar
    
    local fillCorner = Instance.new("UICorner")
    fillCorner.CornerRadius = UDim.new(1, 0)
    fillCorner.Parent = sliderFill
    
    local sliderKnob = Instance.new("Frame")
    sliderKnob.Size = UDim2.new(0, 16, 0, 16)
    sliderKnob.Position = UDim2.new((default or min) / (max - min), -8, 0.5, -8)
    sliderKnob.BackgroundColor3 = self.Theme.Primary
    sliderKnob.BorderSizePixel = 0
    sliderKnob.Parent = sliderBar
    
    local knobCorner = Instance.new("UICorner")
    knobCorner.CornerRadius = UDim.new(1, 0)
    knobCorner.Parent = sliderKnob
    
    local value = default or min
    local dragging = false
    
    local function updateSlider(percentage)
        percentage = math.clamp(percentage, 0, 1)
        value = min + (max - min) * percentage
        
        valueLabel.Text = string.format("%.1f", value)
        sliderFill.Size = UDim2.new(percentage, 0, 1, 0)
        sliderKnob.Position = UDim2.new(percentage, -8, 0.5, -8)
        
        if callback then
            callback(value)
        end
    end
    
    sliderBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            local percentage = (input.Position.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X
            updateSlider(percentage)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local percentage = (input.Position.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X
            updateSlider(percentage)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    self:_updateContentSize()
    return container, function() return value end
end

-- Input Component
function NexusUI:Input(text, placeholder, callback)
    local container = Instance.new("Frame")
    container.Name = "Input"
    container.Size = UDim2.new(1, 0, 0, 60)
    container.BackgroundColor3 = self.Theme.Surface
    container.BorderSizePixel = 0
    container.Parent = self.ContentContainer
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = container
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -20, 0, 20)
    label.Position = UDim2.new(0, 10, 0, 5)
    label.BackgroundTransparency = 1
    label.Text = text or "Input"
    label.TextColor3 = self.Theme.Text
    label.TextSize = 14
    label.Font = Enum.Font.Gotham
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = container
    
    local input = Instance.new("TextBox")
    input.Size = UDim2.new(1, -20, 0, 30)
    input.Position = UDim2.new(0, 10, 0, 25)
    input.BackgroundColor3 = self.Theme.Background
    input.BorderSizePixel = 0
    input.Text = ""
    input.PlaceholderText = placeholder or "Enter text..."
    input.TextColor3 = self.Theme.Text
    input.PlaceholderColor3 = self.Theme.TextSecondary
    input.TextSize = 14
    input.Font = Enum.Font.Gotham
    input.TextXAlignment = Enum.TextXAlignment.Left
    input.Parent = container
    
    local inputCorner = Instance.new("UICorner")
    inputCorner.CornerRadius = UDim.new(0, 6)
    inputCorner.Parent = input
    
    input.FocusLost:Connect(function(enterPressed)
        if callback and enterPressed then
            callback(input.Text)
        end
    end)
    
    self:_updateContentSize()
    return input
end

-- Dropdown Component
function NexusUI:Dropdown(text, options, callback)
    local container = Instance.new("Frame")
    container.Name = "Dropdown"
    container.Size = UDim2.new(1, 0, 0, 40)
    container.BackgroundColor3 = self.Theme.Surface
    container.BorderSizePixel = 0
    container.Parent = self.ContentContainer
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = container
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0.4, 0, 1, 0)
    label.Position = UDim2.new(0, 15, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = text or "Dropdown"
    label.TextColor3 = self.Theme.Text
    label.TextSize = 14
    label.Font = Enum.Font.Gotham
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = container
    
    local dropdown = Instance.new("TextButton")
    dropdown.Size = UDim2.new(0.6, -15, 0, 30)
    dropdown.Position = UDim2.new(0.4, 0, 0, 5)
    dropdown.BackgroundColor3 = self.Theme.Background
    dropdown.BorderSizePixel = 0
    dropdown.Text = options[1] or "Select..."
    dropdown.TextColor3 = self.Theme.Text
    dropdown.TextSize = 14
    dropdown.Font = Enum.Font.Gotham
    dropdown.Parent = container
    
    local dropCorner = Instance.new("UICorner")
    dropCorner.CornerRadius = UDim.new(0, 6)
    dropCorner.Parent = dropdown
    
    local arrow = Instance.new("TextLabel")
    arrow.Size = UDim2.new(0, 20, 1, 0)
    arrow.Position = UDim2.new(1, -25, 0, 0)
    arrow.BackgroundTransparency = 1
    arrow.Text = "â–¼"
    arrow.TextColor3 = self.Theme.TextSecondary
    arrow.TextSize = 10
    arrow.Font = Enum.Font.Gotham
    arrow.Parent = dropdown
    
    local optionsFrame = Instance.new("Frame")
    optionsFrame.Size = UDim2.new(1, 0, 0, #options * 30)
    optionsFrame.Position = UDim2.new(0, 0, 1, 5)
    optionsFrame.BackgroundColor3 = self.Theme.Background
    optionsFrame.BorderSizePixel = 0
    optionsFrame.Visible = false
    optionsFrame.ZIndex = 10
    optionsFrame.Parent = dropdown
    
    local optionsCorner = Instance.new("UICorner")
    optionsCorner.CornerRadius = UDim.new(0, 6)
    optionsCorner.Parent = optionsFrame
    
    local optionsLayout = Instance.new("UIListLayout")
    optionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    optionsLayout.Parent = optionsFrame
    
    for i, option in ipairs(options) do
        local optionButton = Instance.new("TextButton")
        optionButton.Size = UDim2.new(1, 0, 0, 30)
        optionButton.BackgroundColor3 = self.Theme.Background
        optionButton.BorderSizePixel = 0
        optionButton.Text = option
        optionButton.TextColor3 = self.Theme.Text
        optionButton.TextSize = 14
        optionButton.Font = Enum.Font.Gotham
        optionButton.Parent = optionsFrame
        
        optionButton.MouseEnter:Connect(function()
            optionButton.BackgroundColor3 = self.Theme.Primary
        end)
        
        optionButton.MouseLeave:Connect(function()
            optionButton.BackgroundColor3 = self.Theme.Background
        end)
        
        optionButton.MouseButton1Click:Connect(function()
            dropdown.Text = option
            optionsFrame.Visible = false
            arrow.Text = "â–¼"
            
            if callback then
                callback(option, i)
            end
        end)
    end
    
    dropdown.MouseButton1Click:Connect(function()
        optionsFrame.Visible = not optionsFrame.Visible
        arrow.Text = optionsFrame.Visible and "â–²" or "â–¼"
        
        if optionsFrame.Visible then
            container.Size = UDim2.new(1, 0, 0, 40 + #options * 30 + 5)
        else
            container.Size = UDim2.new(1, 0, 0, 40)
        end
        
        self:_updateContentSize()
    end)
    
    self:_updateContentSize()
    return dropdown
end

-- Label Component
function NexusUI:Label(text, size)
    local label = Instance.new("TextLabel")
    label.Name = "Label"
    label.Size = UDim2.new(1, 0, 0, size or 30)
    label.BackgroundTransparency = 1
    label.Text = text or "Label"
    label.TextColor3 = self.Theme.Text
    label.TextSize = 14
    label.Font = Enum.Font.Gotham
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.TextWrapped = true
    label.Parent = self.ContentContainer
    
    self:_updateContentSize()
    return label
end

-- Separator Component
function NexusUI:Separator()
    local separator = Instance.new("Frame")
    separator.Name = "Separator"
    separator.Size = UDim2.new(1, 0, 0, 1)
    separator.BackgroundColor3 = self.Theme.Border
    separator.BorderSizePixel = 0
    separator.Parent = self.ContentContainer
    
    self:_updateContentSize()
    return separator
end

-- Section Component
function NexusUI:Section(title)
    local section = Instance.new("Frame")
    section.Name = "Section"
    section.Size = UDim2.new(1, 0, 0, 35)
    section.BackgroundTransparency = 1
    section.Parent = self.ContentContainer
    
    local sectionTitle = Instance.new("TextLabel")
    sectionTitle.Size = UDim2.new(1, 0, 1, 0)
    sectionTitle.BackgroundTransparency = 1
    sectionTitle.Text = title or "Section"
    sectionTitle.TextColor3 = self.Theme.Primary
    sectionTitle.TextSize = 16
    sectionTitle.Font = Enum.Font.GothamBold
    sectionTitle.TextXAlignment = Enum.TextXAlignment.Left
    sectionTitle.Parent = section
    
    local underline = Instance.new("Frame")
    underline.Size = UDim2.new(0, 40, 0, 2)
    underline.Position = UDim2.new(0, 0, 1, -5)
    underline.BackgroundColor3 = self.Theme.Primary
    underline.BorderSizePixel = 0
    underline.Parent = section
    
    local underlineCorner = Instance.new("UICorner")
    underlineCorner.CornerRadius = UDim.new(1, 0)
    underlineCorner.Parent = underline
    
    self:_updateContentSize()
    return section
end

-- Notification System
function NexusUI:Notify(title, text, duration, type)
    local notifyGui = Instance.new("ScreenGui")
    notifyGui.Name = "NexusNotify"
    notifyGui.ResetOnSpawn = false
    
    pcall(function()
        notifyGui.Parent = gethui() or game.CoreGui
    end)
    
    local notification = Instance.new("Frame")
    notification.Size = UDim2.new(0, 300, 0, 80)
    notification.Position = UDim2.new(1, 20, 0, 50)
    notification.BackgroundColor3 = self.Theme.Surface
    notification.BorderSizePixel = 0
    notification.Parent = notifyGui
    
    local notifyCorner = Instance.new("UICorner")
    notifyCorner.CornerRadius = UDim.new(0, 10)
    notifyCorner.Parent = notification
    
    -- Color indicator based on type
    local colors = {
        info = self.Theme.Primary,
        success = self.Theme.Success,
        warning = self.Theme.Warning,
        error = self.Theme.Error
    }
    
    local indicator = Instance.new("Frame")
    indicator.Size = UDim2.new(0, 4, 1, 0)
    indicator.Position = UDim2.new(0, 0, 0, 0)
    indicator.BackgroundColor3 = colors[type] or self.Theme.Primary
    indicator.BorderSizePixel = 0
    indicator.Parent = notification
    
    local indicatorCorner = Instance.new("UICorner")
    indicatorCorner.CornerRadius = UDim.new(0, 10)
    indicatorCorner.Parent = indicator
    
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, -50, 0, 25)
    titleLabel.Position = UDim2.new(0, 15, 0, 10)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title or "Notification"
    titleLabel.TextColor3 = self.Theme.Text
    titleLabel.TextSize = 14
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = notification
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, -50, 0, 35)
    textLabel.Position = UDim2.new(0, 15, 0, 30)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = text or "Notification text"
    textLabel.TextColor3 = self.Theme.TextSecondary
    textLabel.TextSize = 12
    textLabel.Font = Enum.Font.Gotham
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.TextWrapped = true
    textLabel.Parent = notification
    
    local closeBtn = Instance.new("TextButton")
    closeBtn.Size = UDim2.new(0, 20, 0, 20)
    closeBtn.Position = UDim2.new(1, -30, 0, 10)
    closeBtn.BackgroundTransparency = 1
    closeBtn.Text = "Ã—"
    closeBtn.TextColor3 = self.Theme.TextSecondary
    closeBtn.TextSize = 16
    closeBtn.Font = Enum.Font.GothamBold
    closeBtn.Parent = notification
    
    -- Slide in animation
    createTween(notification, {Time = 0.5, Style = Enum.EasingStyle.Back}, 
        {Position = UDim2.new(1, -320, 0, 50)}):Play()
    
    -- Auto close or manual close
    local function closeNotification()
        createTween(notification, {Time = 0.3}, 
            {Position = UDim2.new(1, 20, 0, 50)}):Play()
        
        wait(0.3)
        notifyGui:Destroy()
    end
    
    closeBtn.MouseButton1Click:Connect(closeNotification)
    
    if duration and duration > 0 then
        spawn(function()
            wait(duration)
            if notifyGui.Parent then
                closeNotification()
            end
        end)
    end
    
    return notification
end

-- Progress Bar Component
function NexusUI:ProgressBar(text, value)
    local container = Instance.new("Frame")
    container.Name = "ProgressBar"
    container.Size = UDim2.new(1, 0, 0, 50)
    container.BackgroundColor3 = self.Theme.Surface
    container.BorderSizePixel = 0
    container.Parent = self.ContentContainer
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = container
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0.7, 0, 0, 20)
    label.Position = UDim2.new(0, 15, 0, 5)
    label.BackgroundTransparency = 1
    label.Text = text or "Progress"
    label.TextColor3 = self.Theme.Text
    label.TextSize = 14
    label.Font = Enum.Font.Gotham
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = container
    
    local percentLabel = Instance.new("TextLabel")
    percentLabel.Size = UDim2.new(0.3, -15, 0, 20)
    percentLabel.Position = UDim2.new(0.7, 0, 0, 5)
    percentLabel.BackgroundTransparency = 1
    percentLabel.Text = math.floor((value or 0) * 100) .. "%"
    percentLabel.TextColor3 = self.Theme.Primary
    percentLabel.TextSize = 14
    percentLabel.Font = Enum.Font.GothamBold
    percentLabel.TextXAlignment = Enum.TextXAlignment.Right
    percentLabel.Parent = container
    
    local progressBg = Instance.new("Frame")
    progressBg.Size = UDim2.new(1, -30, 0, 8)
    progressBg.Position = UDim2.new(0, 15, 1, -18)
    progressBg.BackgroundColor3 = self.Theme.Border
    progressBg.BorderSizePixel = 0
    progressBg.Parent = container
    
    local bgCorner = Instance.new("UICorner")
    bgCorner.CornerRadius = UDim.new(1, 0)
    bgCorner.Parent = progressBg
    
    local progressFill = Instance.new("Frame")
    progressFill.Size = UDim2.new(value or 0, 0, 1, 0)
    progressFill.Position = UDim2.new(0, 0, 0, 0)
    progressFill.BackgroundColor3 = self.Theme.Primary
    progressFill.BorderSizePixel = 0
    progressFill.Parent = progressBg
    
    local fillCorner = Instance.new("UICorner")
    fillCorner.CornerRadius = UDim.new(1, 0)
    fillCorner.Parent = progressFill
    
    local function updateProgress(newValue)
        newValue = math.clamp(newValue, 0, 1)
        percentLabel.Text = math.floor(newValue * 100) .. "%"
        createTween(progressFill, {Time = 0.3}, {Size = UDim2.new(newValue, 0, 1, 0)}):Play()
    end
    
    self:_updateContentSize()
    return container, updateProgress
end

-- Tab System
function NexusUI:CreateTabSystem()
    local tabSystem = {
        Tabs = {},
        ActiveTab = nil,
        TabContainer = nil,
        ContentContainer = nil
    }
    
    -- Replace current content container with tab system
    self.ContentContainer.Visible = false
    
    -- Tab buttons container
    local tabButtonContainer = Instance.new("Frame")
    tabButtonContainer.Name = "TabButtons"
    tabButtonContainer.Size = UDim2.new(1, -20, 0, 40)
    tabButtonContainer.Position = UDim2.new(0, 10, 0, 60)
    tabButtonContainer.BackgroundTransparency = 1
    tabButtonContainer.Parent = self.Container
    
    local tabLayout = Instance.new("UIListLayout")
    tabLayout.FillDirection = Enum.FillDirection.Horizontal
    tabLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabLayout.Padding = UDim.new(0, 5)
    tabLayout.Parent = tabButtonContainer
    
    -- Tab content container
    local tabContentContainer = Instance.new("Frame")
    tabContentContainer.Name = "TabContent"
    tabContentContainer.Size = UDim2.new(1, -20, 1, -120)
    tabContentContainer.Position = UDim2.new(0, 10, 0, 110)
    tabContentContainer.BackgroundTransparency = 1
    tabContentContainer.Parent = self.Container
    
    tabSystem.TabContainer = tabButtonContainer
    tabSystem.ContentContainer = tabContentContainer
    
    function tabSystem:CreateTab(name)
        local tab = {
            Name = name,
            Button = nil,
            Content = nil,
            Components = {}
        }
        
        -- Tab button
        tab.Button = Instance.new("TextButton")
        tab.Button.Size = UDim2.new(0, 100, 1, 0)
        tab.Button.BorderSizePixel = 0
        tab.Button.Text = name
        tab.Button.TextColor3 = self.Theme.TextSecondary
        tab.Button.TextSize = 14
        tab.Button.Font = Enum.Font.Gotham
        tab.Button.Parent = tabButtonContainer
        
        local buttonCorner = Instance.new("UICorner")
        buttonCorner.CornerRadius = UDim.new(0, 6)
        buttonCorner.Parent = tab.Button
        
        -- Tab content
        tab.Content = Instance.new("ScrollingFrame")
        tab.Content.Size = UDim2.new(1, 0, 1, 0)
        tab.Content.BackgroundTransparency = 1
        tab.Content.BorderSizePixel = 0
        tab.Content.ScrollBarThickness = 6
        tab.Content.ScrollBarImageColor3 = self.Theme.Primary
        tab.Content.Visible = false
        tab.Content.Parent = tabContentContainer
        
        local contentLayout = Instance.new("UIListLayout")
        contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        contentLayout.Padding = UDim.new(0, 8)
        contentLayout.Parent = tab.Content
        
        -- Tab switching logic
        tab.Button.MouseButton1Click:Connect(function()
            tabSystem:SwitchToTab(tab)
        end)
        
        -- Add to tabs list
        table.insert(tabSystem.Tabs, tab)
        
        -- Make first tab active
        if #tabSystem.Tabs == 1 then
            tabSystem:SwitchToTab(tab)
        end
        
        return tab
    end
    
    function tabSystem:SwitchToTab(targetTab)
        -- Hide all tabs
        for _, tab in pairs(tabSystem.Tabs) do
            tab.Content.Visible = false
            tab.Button.BackgroundColor3 = self.Theme.Surface
            tab.Button.TextColor3 = self.Theme.TextSecondary
        end
        
        -- Show target tab
        targetTab.Content.Visible = true
        targetTab.Button.BackgroundColor3 = self.Theme.Primary
        targetTab.Button.TextColor3 = Color3.fromRGB(255, 255, 255)
        tabSystem.ActiveTab = targetTab
    end
    
    return tabSystem
end

-- Keybind Component
function NexusUI:Keybind(text, defaultKey, callback)
    local container = Instance.new("Frame")
    container.Name = "Keybind"
    container.Size = UDim2.new(1, 0, 0, 40)
    container.BackgroundColor3 = self.Theme.Surface
    container.BorderSizePixel = 0
    container.Parent = self.ContentContainer
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = container
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0.6, 0, 1, 0)
    label.Position = UDim2.new(0, 15, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = text or "Keybind"
    label.TextColor3 = self.Theme.Text
    label.TextSize = 14
    label.Font = Enum.Font.Gotham
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = container
    
    local keybindButton = Instance.new("TextButton")
    keybindButton.Size = UDim2.new(0.4, -15, 0, 30)
    keybindButton.Position = UDim2.new(0.6, 0, 0, 5)
    keybindButton.BackgroundColor3 = self.Theme.Background
    keybindButton.BorderSizePixel = 0
    keybindButton.Text = defaultKey and defaultKey.Name or "None"
    keybindButton.TextColor3 = self.Theme.Text
    keybindButton.TextSize = 12
    keybindButton.Font = Enum.Font.Gotham
    keybindButton.Parent = container
    
    local keyCorner = Instance.new("UICorner")
    keyCorner.CornerRadius = UDim.new(0, 6)
    keyCorner.Parent = keybindButton
    
    local currentKey = defaultKey
    local listening = false
    
    keybindButton.MouseButton1Click:Connect(function()
        if listening then return end
        
        listening = true
        keybindButton.Text = "Press a key..."
        keybindButton.BackgroundColor3 = self.Theme.Primary
        
        local connection
        connection = UserInputService.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.Keyboard then
                currentKey = input.KeyCode
                keybindButton.Text = input.KeyCode.Name
                keybindButton.BackgroundColor3 = self.Theme.Background
                listening = false
                connection:Disconnect()
                
                if callback then
                    callback(currentKey)
                end
            end
        end)
    end)
    
    -- Listen for the keybind press
    if currentKey then
        UserInputService.InputBegan:Connect(function(input)
            if input.KeyCode == currentKey and not listening then
                if callback then
                    callback(currentKey)
                end
            end
        end)
    end
    
    self:_updateContentSize()
    return container, function() return currentKey end
end

-- Color Picker Component (Simple)
function NexusUI:ColorPicker(text, defaultColor, callback)
    local container = Instance.new("Frame")
    container.Name = "ColorPicker"
    container.Size = UDim2.new(1, 0, 0, 40)
    container.BackgroundColor3 = self.Theme.Surface
    container.BorderSizePixel = 0
    container.Parent = self.ContentContainer
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = container
    
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0.7, 0, 1, 0)
    label.Position = UDim2.new(0, 15, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = text or "Color"
    label.TextColor3 = self.Theme.Text
    label.TextSize = 14
    label.Font = Enum.Font.Gotham
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = container
    
    local colorButton = Instance.new("TextButton")
    colorButton.Size = UDim2.new(0.3, -15, 0, 30)
    colorButton.Position = UDim2.new(0.7, 0, 0, 5)
    colorButton.BackgroundColor3 = defaultColor or Color3.fromRGB(255, 255, 255)
    colorButton.BorderSizePixel = 0
    colorButton.Text = ""
    colorButton.Parent = container
    
    local colorCorner = Instance.new("UICorner")
    colorCorner.CornerRadius = UDim.new(0, 6)
    colorCorner.Parent = colorButton
    
    local currentColor = defaultColor or Color3.fromRGB(255, 255, 255)
    
    -- Simple color cycling on click
    local colors = {
        Color3.fromRGB(255, 255, 255), -- White
        Color3.fromRGB(255, 0, 0),     -- Red
        Color3.fromRGB(0, 255, 0),     -- Green
        Color3.fromRGB(0, 0, 255),     -- Blue
        Color3.fromRGB(255, 255, 0),   -- Yellow
        Color3.fromRGB(255, 0, 255),   -- Magenta
        Color3.fromRGB(0, 255, 255),   -- Cyan
        Color3.fromRGB(255, 128, 0),   -- Orange
        Color3.fromRGB(128, 0, 255),   -- Purple
        Color3.fromRGB(0, 0, 0)        -- Black
    }
    
    local colorIndex = 1
    for i, color in ipairs(colors) do
        if color == currentColor then
            colorIndex = i
            break
        end
    end
    
    colorButton.MouseButton1Click:Connect(function()
        colorIndex = colorIndex + 1
        if colorIndex > #colors then
            colorIndex = 1
        end
        
        currentColor = colors[colorIndex]
        colorButton.BackgroundColor3 = currentColor
        
        if callback then
            callback(currentColor)
        end
    end)
    
    self:_updateContentSize()
    return container, function() return currentColor end
end

-- Update content size helper
function NexusUI:_updateContentSize()
    local totalHeight = 0
    for _, child in pairs(self.ContentContainer:GetChildren()) do
        if child:IsA("GuiObject") and child.Visible then
            totalHeight = totalHeight + child.AbsoluteSize.Y + 8
        end
    end
    self.ContentContainer.CanvasSize = UDim2.new(0, 0, 0, totalHeight)
end

-- Set Theme
function NexusUI:SetTheme(themeName)
    if not Themes[themeName] then return end
    
    self.Theme = Themes[themeName]
    
    -- Update existing elements
    self.Container.BackgroundColor3 = self.Theme.Background
    self.TitleBar.BackgroundColor3 = self.Theme.Surface
    self.TitleLabel.TextColor3 = self.Theme.Text
    self.ContentContainer.ScrollBarImageColor3 = self.Theme.Primary
end

-- Cleanup
function NexusUI:Destroy()
    if self.ScreenGui then
        self.ScreenGui:Destroy()
    end
end

-- Return the library
return NexusUI

--[[
USAGE EXAMPLE:

local NexusUI = loadstring(game:HttpGet("YOUR_URL_HERE"))()

-- Create main window
local Window = NexusUI.new("My Script", "Dark")

-- Show the window
Window:Show()

-- Add components
Window:Section("Main")
Window:Button("Test Button", function()
    print("Button clicked!")
end)

Window:Toggle("Enable Feature", false, function(state)
    print("Toggle:", state)
end)

local slider = Window:Slider("Speed", 0, 100, 50, function(value)
    print("Slider:", value)
end)

Window:Input("Player Name", "Enter name...", function(text)
    print("Input:", text)
end)

Window:Dropdown("Select Option", {"Option 1", "Option 2", "Option 3"}, function(option)
    print("Selected:", option)
end)

-- Notifications
Window:Notify("Success!", "Script loaded successfully", 3, "success")

-- Tab System Example
local TabSystem = Window:CreateTabSystem()
local MainTab = TabSystem:CreateTab("Main")
local SettingsTab = TabSystem:CreateTab("Settings")

MainTab.Content.Parent = Window.ContentContainer -- Redirect components to tab

Window:Keybind("Toggle GUI", Enum.KeyCode.RightShift, function()
    Window:Toggle()
end)

--]]
